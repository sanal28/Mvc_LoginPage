1)remove all elements contained in another array

https://stackoverflow.com/questions/19957348/javascript-arrays-remove-all-elements-contained-in-another-array

2)Get Difference of two arrays

       function differenceArray(array1, array2) {
                var foo = [];
                var i = 0;
                jQuery.grep(array2, function (el) {

                    if (jQuery.inArray(el, array1) == -1) foo.push(el);
                    i++;

                });
                return foo;
            }
3)create CSV file

  private string CreateCSVFile(DataVisualizationModel model)
        {
            string Status = string.Empty;
            string Status1 = string.Empty;
            string FilePath = string.Empty;
            string OfficeName = model.OfficeName;
            string Entity = model.EntityName;
            string PeriodEndDate = model.PeriodEndDate;
            string RecordID = model.RecordID.ToString();
            FilePath = ConfigurationManager.AppSettings["DataVisualizationFilePath"].ToString().Replace("{Office}", OfficeName.Replace(" ", "")).Replace("{Entity-PeriodEndDate}", Entity + '-' + PeriodEndDate);
            var CSVList = GetCSVList(model.ProcessCode);
            var CubeList = GetCubeList(model.ProjectCode);
            StringBuilder sb = new StringBuilder();
            StringBuilder sb1 = new StringBuilder();
            List<string> CsvRow = new List<string>();
            List<string> CubeRow = new List<string>();
            //Add headers

            sb.AppendLine("Tag_Name|Display_Name|Account_Number");

            foreach (DataRow row in CSVList.Rows)
            {
                var tagName = row["CSVList"].ToString().Split('|')[0];
                var DisplayName = row["CSVList"].ToString().Split('|')[1];
                var arrayStr = row["CSVList"].ToString().Split('|')[2];
                var array = arrayStr.Split(';');
                for (var i = 0; i < array.Length; i++)
                {
                    var line = tagName + '|' + DisplayName + '|' + array[i];
                    sb.AppendLine(line.ToString());
                }

            }
            string fileName = ConfigurationManager.AppSettings["DataVisualizationFileName"].ToString();
            string FileName = fileName + "_" + RecordID + ".csv";

            string SaveLocation = FilePath + FileName;
            if (File.Exists(SaveLocation))
            {
                Status = "File with Name " + FileName + " already exists.Please change the file name.";
            }
            if (Status == string.Empty)
                File.WriteAllText(SaveLocation, sb.ToString());


            // Cube
            var count = CubeList.Rows.Count;

            if (count != 0)
            {
                sb1.AppendLine("SystemOrManualEntries|SystemJournalEntryIdentificationField|SystemEntryValue");
                foreach (DataRow row in CubeList.Rows)
                {
                    var Entry = row["CSVList"].ToString().Split('|')[0];
                    var Field = row["CSVList"].ToString().Split('|')[1];
                    var arrayStr = row["CSVList"].ToString().Split('|')[2];
                    var array = arrayStr.Split(';');
                    for (var i = 0; i < array.Length; i++)
                    {
                        var line = Entry + '|' + Field + '|' + array[i];
                        sb1.AppendLine(line.ToString());
                    }
                    string CubefileName = ConfigurationManager.AppSettings["DataVisualizationCubeFileName"].ToString();
                    string CubeFileName = CubefileName + "_" + RecordID + ".csv";

                    string CubeSaveLocation = FilePath + CubeFileName;
                    if (File.Exists(CubeSaveLocation))
                    {
                        Status1 = "File with Name " + CubeFileName + " already exists.Please change the file name.";
                    }
                    if (Status1 == string.Empty)
                        File.WriteAllText(CubeSaveLocation, sb1.ToString());

                }
            }
            return (Status + Status1);
        }
        
        
   4)  includes() method determines whether a string contains the characters of a specified string 
   
   includes doesnot support in IE use   array.indexOf("Chief Financial Officer") !== -1
        
    5 )  convert List to XML in C#
    in model
     public List<MappingModel> MappingData { get; set; }
       public class MappingModel
    {
        public string aa { get; set; }
        public string aaaa { get; set; }
        
    }
    in .cs
    var MappingXML = SerializeAccount(model.MappingData);
        private string SerializeAccount(List<MappingModel> lstAccounts)
        {
            XmlSerializer xs = new XmlSerializer(typeof(List<MappingModel>));
            MemoryStream ms = new MemoryStream();
            xs.Serialize(ms, lstAccounts);

            string AccountXML = UTF8Encoding.UTF8.GetString(ms.ToArray());
            return AccountXML;
        }
        
        6)Maximum request length exceeded.
         <httpRuntime targetFramework="4.6.1" maxRequestLength="22000" />
         https://stackoverflow.com/questions/3853767/maximum-request-length-exceeded
         
         7) 5555555555 to 55,555,555.0
                 
         $('.gdBudgetValue').each(function () {
            var numValue = parseFloat(this.textContent.match(/^-?\d+(?:\.\d{0,1})?/)[0]);
        this.textContent = numValue.toFixed(1).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    });
    
       12,34,567.80
      this.textContent = numValue.toFixed(2).replace(/(\d)(?=(\d{2})+\d\.)/g, "$1,");
    
